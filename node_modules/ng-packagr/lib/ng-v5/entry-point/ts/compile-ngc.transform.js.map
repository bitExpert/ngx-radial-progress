{"version":3,"file":"compile-ngc.transform.js","sourceRoot":"","sources":["../../../../../src/lib/ng-v5/entry-point/ts/compile-ngc.transform.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA6B;AAC7B,iCAAiC;AACjC,wDAA2E;AAC3E,4EAAuE;AACvE,mDAAoE;AACpE,yCAAyC;AACzC,uCAAmF;AACnF,4EAAwE;AAE3D,QAAA,mBAAmB,GAAc,gCAAoB,CAAC,CAAM,KAAK,EAAC,EAAE;IAC/E,GAAG,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;IACrD,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,8BAAsB,EAAE,CAAmB,CAAC;IAC1E,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,oBAAY,CAAqB,CAAC;IACnE,sCAAsC;IACtC,MAAM,QAAQ,GAAG,uCAA4B,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IAErF,6BAA6B;IAC7B,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACzE,MAAM,EAAE,qBAAqB,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC;IACnD,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,iBAAiB,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC;IAC3E,MAAM,mBAAmB,GAAG,IAAI,0CAAmB,CAAC,QAAQ,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;IAEzF,MAAM,OAAO,CAAC,GAAG,CAAC;QAChB,yCAAkB,CAChB,KAAK,EACL,UAAU,EACV,QAAQ,EACR,qBAAqB,EACrB,mBAAmB,EACnB;YACE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;YAC7B,WAAW,EAAE,IAAI;YACjB,MAAM,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM;SAC/B,EACD,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAC3B;QAED,yCAAkB,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,qBAAqB,EAAE,mBAAmB,EAAE;YAC1F,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;YAC1B,MAAM,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG;YAC3B,kBAAkB,EAAE,IAAI;YACxB,kDAAkD;YAClD,WAAW,EAAE,KAAK;YAClB,cAAc,EAAE,SAAS;YACzB,gBAAgB,EAAE,IAAI;YACtB,mBAAmB,EAAE,IAAI;YACzB,kBAAkB,EAAE,KAAK;SAC1B,CAAC;KACH,CAAC,CAAC;IAEH,OAAO,KAAK,CAAC;AACf,CAAC,CAAA,CAAC,CAAC","sourcesContent":["import * as path from 'path';\nimport * as ts from 'typescript';\nimport { Transform, transformFromPromise } from '../../../brocc/transform';\nimport { compileSourceFiles } from '../../../ngc/compile-source-files';\nimport { setDependenciesTsConfigPaths } from '../../../ts/tsconfig';\nimport * as log from '../../../util/log';\nimport { isEntryPointInProgress, EntryPointNode, isEntryPoint } from '../../nodes';\nimport { StylesheetProcessor } from '../resources/stylesheet-processor';\n\nexport const compileNgcTransform: Transform = transformFromPromise(async graph => {\n  log.info(`Compiling TypeScript sources through ngc`);\n  const entryPoint = graph.find(isEntryPointInProgress()) as EntryPointNode;\n  const entryPoints = graph.filter(isEntryPoint) as EntryPointNode[];\n  // Add paths mappings for dependencies\n  const tsConfig = setDependenciesTsConfigPaths(entryPoint.data.tsConfig, entryPoints);\n\n  // Compile TypeScript sources\n  const { esm2015, esm5, declarations } = entryPoint.data.destinationFiles;\n  const { moduleResolutionCache } = entryPoint.cache;\n  const { basePath, cssUrl, styleIncludePaths } = entryPoint.data.entryPoint;\n  const stylesheetProcessor = new StylesheetProcessor(basePath, cssUrl, styleIncludePaths);\n\n  await Promise.all([\n    compileSourceFiles(\n      graph,\n      entryPoint,\n      tsConfig,\n      moduleResolutionCache,\n      stylesheetProcessor,\n      {\n        outDir: path.dirname(esm2015),\n        declaration: true,\n        target: ts.ScriptTarget.ES2015\n      },\n      path.dirname(declarations)\n    ),\n\n    compileSourceFiles(graph, entryPoint, tsConfig, moduleResolutionCache, stylesheetProcessor, {\n      outDir: path.dirname(esm5),\n      target: ts.ScriptTarget.ES5,\n      downlevelIteration: true,\n      // the options are here, to improve the build time\n      declaration: false,\n      declarationDir: undefined,\n      skipMetadataEmit: true,\n      skipTemplateCodegen: true,\n      strictMetadataEmit: false\n    })\n  ]);\n\n  return graph;\n});\n"]}