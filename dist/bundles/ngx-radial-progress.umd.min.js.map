{"version":3,"sources":["ng://ngx-radial-progress/src/app/modules/radial-progress/radial-progress.component.ts","ng://ngx-radial-progress/src/app/modules/radial-progress/radial-progress.module.ts"],"names":["RadialProgressComponent","el","this","addClass","animation","circleSize","clockwise","delay","fill","fillBackground","percent","percentUnit","showPercent","strokeBackground","strokeLinecap","strokeSteps","strokeColor","strokeStep","strokeWidth","strokeWidthBackground","title","transitionDuration","onClose","EventEmitter","initCircleSize","strokeDashOffset","strokeDashArray","percentCount","strokeColorActive","circleProgressSteps","rotateY","animationHelper","strokeWidthHelper","negate","transParam","transPoints","transRank","prototype","ngOnInit","self","normalizeData","setCircleDimensions","initCircles","setTimeout","calcDashOffset","startPercentCounter","gradientColor","Math","round","nativeElement","clientWidth","infoMessage","console","warn","radius","PI","log","forEach","ele","i","length","intervalDuration","self_1","thisCounterInterval_1","setInterval","clearInterval","gradientChangeTimer","i_1","gradientInterval_1","checkSize","thisWidth","onResize","event","target","innerWidth","Component","args","selector","template","ElementRef","Input","Output","RadialProgressModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {Component, ElementRef, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'radial-progress',\n  templateUrl: 'radial-progress.component.html',\n  styles: [`\n    :host {\n      display: block;\n    }\n    .radial-progress {\n      position: relative;\n      display: inline-block;\n    }\n    .radial-progress--circle {\n      line-height: 0;\n    }\n  `]\n})\nexport class RadialProgressComponent implements OnInit {\n  @Input() addClass: string = '';\n  @Input() animation: boolean = true;\n  @Input() circleSize: number = 0;\n  @Input() clockwise: boolean = false;\n  @Input() delay: number = 0;\n  @Input() fill: string = 'transparent';\n  @Input() fillBackground: string = 'transparent';\n  @Input() percent: number = 50;\n  @Input() percentUnit: string = '%';\n  @Input() showPercent: boolean = true;\n  @Input() strokeBackground: string = 'transparent';\n  @Input() strokeLinecap: string = \"butt\";\n  @Input() strokeSteps: any = [\n    {\n      strokeColor: 'red',\n      strokeStep: 10\n    }, {\n      strokeColor: 'green',\n      strokeStep: 100\n    }\n  ];\n  @Input() strokeWidth: number = 10;\n  @Input() strokeWidthBackground: number = this.strokeWidth;\n  @Input() title: string = '';\n  @Input() transitionDuration: number = 5000;\n\n  @Output() onClose: EventEmitter<boolean> = new EventEmitter();\n\n  initCircleSize = this.circleSize;\n  strokeDashOffset: number = 0;\n  strokeDashArray: number = 0;\n  percentCount: number = 0;\n  strokeColorActive: string = this.strokeSteps[0].strokeColor;\n  circleProgressSteps: number = 1;\n  radius: number;\n  rotateY: number = 0;\n  animationHelper: boolean = false;\n  strokeWidthHelper: number = this.strokeWidth;\n  // negate is -1 if clockwise is true, see html\n  negate: number = 1;\n  transParam: any = {\n    transPoints: '',\n    transRank: ''\n  };\n\n  constructor(private el:ElementRef) {\n  }\n\n  ngOnInit(): void {\n    let self = this;\n\n    this.normalizeData();\n    this.setCircleDimensions();\n    this.initCircles();\n\n    setTimeout(function () {\n      self.calcDashOffset();\n      self.startPercentCounter();\n      self.gradientColor();\n    }, self.delay);\n  }\n\n  normalizeData(): void {\n    this.percent = Math.round(this.percent);\n\n    if (this.percent > 100) {\n      this.percent = 100;\n    }\n\n    if (this.percent < 0) {\n      this.percent = 0;\n    }\n\n    if (this.circleSize == 0){\n      this.circleSize = this.el.nativeElement.clientWidth;\n    }\n    this.initCircleSize = this.circleSize;\n\n    if (this.circleSize < this.strokeWidth){\n      let infoMessage: string = '';\n      infoMessage += 'circleSize is smaller than strokeWidth ';\n      infoMessage += '('+ this.circleSize + ' < ' + this.strokeWidth +')\\n';\n      infoMessage += 'reducing strokeWidth to ' + this.circleSize / 2;\n      console.warn(infoMessage);\n      this.strokeWidth = this.circleSize / 2;\n    }\n  }\n\n  setCircleDimensions(): void {\n    this.strokeWidthHelper = this.strokeWidth;\n    if (this.strokeWidth < this.strokeWidthBackground){\n      this.strokeWidthHelper = this.strokeWidthBackground;\n    }\n    this.radius = ((this.circleSize / 2) - (this.strokeWidthHelper / 2)) * Math.PI * 2;\n    this.strokeDashArray = this.radius;\n    this.strokeDashOffset = this.radius;\n  }\n\n  initCircles(): void {\n    let self = this;\n\n    if (this.animation) {\n      this.transitionDuration = this.transitionDuration * (this.percent / 100);\n    } else {\n      this.transitionDuration = 0;\n    }\n\n    if (!this.clockwise) {\n      this.rotateY = 180;\n      this.negate = -1;\n    }\n\n    this.strokeColorActive = this.strokeSteps[0].strokeColor;\n\n    // check how far circle progress gets\n    console.log(this.strokeSteps);\n    this.strokeSteps.forEach(function (ele, i) {\n      if (self.percent == 100) {\n        self.circleProgressSteps = self.strokeSteps.length;\n        self.transParam.transPoints = 0;\n      } else if (self.percent >= ele.strokeStep && self.percent >= self.strokeSteps[0].strokeStep) {\n        self.circleProgressSteps = i + 2;\n        self.transParam.transPoints = self.strokeSteps[i + 1].strokeStep - self.percent;\n      }\n    });\n  }\n\n  calcDashOffset(): void {\n    this.strokeDashOffset = this.radius * (1 - (this.percent / 100));\n    this.animationHelper = this.animation;\n  }\n\n  startPercentCounter(): void {\n    let intervalDuration = this.transitionDuration / this.percent;\n\n    if (this.animation) {\n      let self = this;\n      let thisCounterInterval = setInterval(function () {\n        self.percentCount++;\n        if (self.percentCount == self.percent) {\n          clearInterval(thisCounterInterval);\n        }\n      }, intervalDuration);\n    } else {\n      this.percentCount = this.percent;\n    }\n  }\n\n  gradientColor(): void {\n    let self = this;\n    if (this.animation) {\n\n      let gradientChangeTimer = this.transitionDuration / this.circleProgressSteps;\n\n      let i = 0;\n      let gradientInterval = setInterval(function () {\n        i++;\n        if (i >= self.circleProgressSteps) {\n          clearInterval(gradientInterval);\n          return;\n        }\n        self.strokeColorActive = self.strokeSteps[i].strokeColor;\n      }, gradientChangeTimer);\n    } else {\n      this.strokeColorActive = this.strokeSteps[this.circleProgressSteps - 1].strokeColor;\n    }\n  }\n\n  checkSize(thisWidth): void {\n    this.circleSize = this.initCircleSize;\n    console.log(this.initCircleSize, this.circleSize, thisWidth);\n    if (thisWidth < this.circleSize){\n      this.transitionDuration = 0;\n      this.circleSize = thisWidth - this.strokeWidth - 1;\n    }\n    this.setCircleDimensions();\n    this.calcDashOffset();\n  }\n\n  onResize(event): void {\n    this.checkSize(event.target.innerWidth);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RadialProgressComponent } from './radial-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [RadialProgressComponent],\n  exports: [RadialProgressComponent]\n})\nexport class RadialProgressModule { }\n"]}