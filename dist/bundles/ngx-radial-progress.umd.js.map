{"version":3,"file":"ngx-radial-progress.umd.js.map","sources":["ng://ngx-radial-progress/src/app/modules/radial-progress/radial-progress.component.ts","ng://ngx-radial-progress/src/app/modules/radial-progress/radial-progress.module.ts"],"sourcesContent":["import {Component, ElementRef, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'radial-progress',\n  templateUrl: 'radial-progress.component.html',\n  styles: [`\n    :host {\n      display: block;\n    }\n    .radial-progress {\n      position: relative;\n      display: inline-block;\n    }\n    .radial-progress--circle {\n      line-height: 0;\n    }\n  `]\n})\nexport class RadialProgressComponent implements OnInit {\n  @Input() addClass: string = '';\n  @Input() animation: boolean = true;\n  @Input() circleSize: number = 0;\n  @Input() clockwise: boolean = false;\n  @Input() delay: number = 0;\n  @Input() fill: string = 'transparent';\n  @Input() fillBackground: string = 'transparent';\n  @Input() percent: number = 50;\n  @Input() percentUnit: string = '%';\n  @Input() showPercent: boolean = true;\n  @Input() strokeBackground: string = 'transparent';\n  @Input() strokeLinecap: string = \"butt\";\n  @Input() strokeSteps: any = [\n    {\n      strokeColor: 'red',\n      strokeStep: 10\n    }, {\n      strokeColor: 'green',\n      strokeStep: 100\n    }\n  ];\n  @Input() strokeWidth: number = 10;\n  @Input() strokeWidthBackground: number = this.strokeWidth;\n  @Input() title: string = '';\n  @Input() transitionDuration: number = 5000;\n\n  @Output() onClose: EventEmitter<boolean> = new EventEmitter();\n\n  initCircleSize = this.circleSize;\n  strokeDashOffset: number = 0;\n  strokeDashArray: number = 0;\n  percentCount: number = 0;\n  strokeColorActive: string = this.strokeSteps[0].strokeColor;\n  circleProgressSteps: number = 1;\n  radius: number;\n  rotateY: number = 0;\n  animationHelper: boolean = false;\n  strokeWidthHelper: number = this.strokeWidth;\n  // negate is -1 if clockwise is true, see html\n  negate: number = 1;\n  transParam: any = {\n    transPoints: '',\n    transRank: ''\n  };\n\n  constructor(private el:ElementRef) {\n  }\n\n  ngOnInit(): void {\n    let self = this;\n\n    this.normalizeData();\n    this.setCircleDimensions();\n    this.initCircles();\n\n    setTimeout(function () {\n      self.calcDashOffset();\n      self.startPercentCounter();\n      self.gradientColor();\n    }, self.delay);\n  }\n\n  normalizeData(): void {\n    this.percent = Math.round(this.percent);\n\n    if (this.percent > 100) {\n      this.percent = 100;\n    }\n\n    if (this.percent < 0) {\n      this.percent = 0;\n    }\n\n    if (this.circleSize == 0){\n      this.circleSize = this.el.nativeElement.clientWidth;\n    }\n    this.initCircleSize = this.circleSize;\n\n    if (this.circleSize < this.strokeWidth){\n      let infoMessage: string = '';\n      infoMessage += 'circleSize is smaller than strokeWidth ';\n      infoMessage += '('+ this.circleSize + ' < ' + this.strokeWidth +')\\n';\n      infoMessage += 'reducing strokeWidth to ' + this.circleSize / 2;\n      console.warn(infoMessage);\n      this.strokeWidth = this.circleSize / 2;\n    }\n  }\n\n  setCircleDimensions(): void {\n    this.strokeWidthHelper = this.strokeWidth;\n    if (this.strokeWidth < this.strokeWidthBackground){\n      this.strokeWidthHelper = this.strokeWidthBackground;\n    }\n    this.radius = ((this.circleSize / 2) - (this.strokeWidthHelper / 2)) * Math.PI * 2;\n    this.strokeDashArray = this.radius;\n    this.strokeDashOffset = this.radius;\n  }\n\n  initCircles(): void {\n    let self = this;\n\n    if (this.animation) {\n      this.transitionDuration = this.transitionDuration * (this.percent / 100);\n    } else {\n      this.transitionDuration = 0;\n    }\n\n    if (!this.clockwise) {\n      this.rotateY = 180;\n      this.negate = -1;\n    }\n\n    this.strokeColorActive = this.strokeSteps[0].strokeColor;\n\n    // check how far circle progress gets\n    console.log(this.strokeSteps);\n    this.strokeSteps.forEach(function (ele, i) {\n      if (self.percent == 100) {\n        self.circleProgressSteps = self.strokeSteps.length;\n        self.transParam.transPoints = 0;\n      } else if (self.percent >= ele.strokeStep && self.percent >= self.strokeSteps[0].strokeStep) {\n        self.circleProgressSteps = i + 2;\n        self.transParam.transPoints = self.strokeSteps[i + 1].strokeStep - self.percent;\n      }\n    });\n  }\n\n  calcDashOffset(): void {\n    this.strokeDashOffset = this.radius * (1 - (this.percent / 100));\n    this.animationHelper = this.animation;\n  }\n\n  startPercentCounter(): void {\n    let intervalDuration = this.transitionDuration / this.percent;\n\n    if (this.animation) {\n      let self = this;\n      let thisCounterInterval = setInterval(function () {\n        self.percentCount++;\n        if (self.percentCount == self.percent) {\n          clearInterval(thisCounterInterval);\n        }\n      }, intervalDuration);\n    } else {\n      this.percentCount = this.percent;\n    }\n  }\n\n  gradientColor(): void {\n    let self = this;\n    if (this.animation) {\n\n      let gradientChangeTimer = this.transitionDuration / this.circleProgressSteps;\n\n      let i = 0;\n      let gradientInterval = setInterval(function () {\n        i++;\n        if (i >= self.circleProgressSteps) {\n          clearInterval(gradientInterval);\n          return;\n        }\n        self.strokeColorActive = self.strokeSteps[i].strokeColor;\n      }, gradientChangeTimer);\n    } else {\n      this.strokeColorActive = this.strokeSteps[this.circleProgressSteps - 1].strokeColor;\n    }\n  }\n\n  checkSize(thisWidth): void {\n    this.circleSize = this.initCircleSize;\n    console.log(this.initCircleSize, this.circleSize, thisWidth);\n    if (thisWidth < this.circleSize){\n      this.transitionDuration = 0;\n      this.circleSize = thisWidth - this.strokeWidth - 1;\n    }\n    this.setCircleDimensions();\n    this.calcDashOffset();\n  }\n\n  onResize(event): void {\n    this.checkSize(event.target.innerWidth);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RadialProgressComponent } from './radial-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [RadialProgressComponent],\n  exports: [RadialProgressComponent]\n})\nexport class RadialProgressModule { }\n"],"names":["EventEmitter","Component","ElementRef","Input","Output","NgModule","CommonModule"],"mappings":";;;;;;;;;;AAAA;QAgEE,iCAAoB,EAAa;YAAb,OAAE,GAAF,EAAE,CAAW;YA7CxB,aAAQ,GAAW,EAAE,CAAC;YACtB,cAAS,GAAY,IAAI,CAAC;YAC1B,eAAU,GAAW,CAAC,CAAC;YACvB,cAAS,GAAY,KAAK,CAAC;YAC3B,UAAK,GAAW,CAAC,CAAC;YAClB,SAAI,GAAW,aAAa,CAAC;YAC7B,mBAAc,GAAW,aAAa,CAAC;YACvC,YAAO,GAAW,EAAE,CAAC;YACrB,gBAAW,GAAW,GAAG,CAAC;YAC1B,gBAAW,GAAY,IAAI,CAAC;YAC5B,qBAAgB,GAAW,aAAa,CAAC;YACzC,kBAAa,GAAW,MAAM,CAAC;YAC/B,gBAAW,GAAQ;gBAC1B;oBACE,WAAW,EAAE,KAAK;oBAClB,UAAU,EAAE,EAAE;iBACf,EAAE;oBACD,WAAW,EAAE,OAAO;oBACpB,UAAU,EAAE,GAAG;iBAChB;aACF,CAAC;YACO,gBAAW,GAAW,EAAE,CAAC;YACzB,0BAAqB,GAAW,IAAI,CAAC,WAAW,CAAC;YACjD,UAAK,GAAW,EAAE,CAAC;YACnB,uBAAkB,GAAW,IAAI,CAAC;YAEjC,YAAO,GAA0B,IAAIA,iBAAY,EAAE,CAAC;YAE9D,mBAAc,GAAG,IAAI,CAAC,UAAU,CAAC;YACjC,qBAAgB,GAAW,CAAC,CAAC;YAC7B,oBAAe,GAAW,CAAC,CAAC;YAC5B,iBAAY,GAAW,CAAC,CAAC;YACzB,sBAAiB,GAAW,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;YAC5D,wBAAmB,GAAW,CAAC,CAAC;YAEhC,YAAO,GAAW,CAAC,CAAC;YACpB,oBAAe,GAAY,KAAK,CAAC;YACjC,sBAAiB,GAAW,IAAI,CAAC,WAAW,CAAC;;YAE7C,WAAM,GAAW,CAAC,CAAC;YACnB,eAAU,GAAQ;gBAChB,WAAW,EAAE,EAAE;gBACf,SAAS,EAAE,EAAE;aACd,CAAC;SAGD;;;;QAED,0CAAQ;;;YAAR;;oBACM,IAAI,GAAG,IAAI;gBAEf,IAAI,CAAC,aAAa,EAAE,CAAC;gBACrB,IAAI,CAAC,mBAAmB,EAAE,CAAC;gBAC3B,IAAI,CAAC,WAAW,EAAE,CAAC;gBAEnB,UAAU,CAAC;oBACT,IAAI,CAAC,cAAc,EAAE,CAAC;oBACtB,IAAI,CAAC,mBAAmB,EAAE,CAAC;oBAC3B,IAAI,CAAC,aAAa,EAAE,CAAC;iBACtB,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;aAChB;;;;QAED,+CAAa;;;YAAb;gBACE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAExC,IAAI,IAAI,CAAC,OAAO,GAAG,GAAG,EAAE;oBACtB,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;iBACpB;gBAED,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,EAAE;oBACpB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;iBAClB;gBAED,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,EAAC;oBACvB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,WAAW,CAAC;iBACrD;gBACD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC;gBAEtC,IAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,EAAC;;wBACjC,WAAW,GAAW,EAAE;oBAC5B,WAAW,IAAI,yCAAyC,CAAC;oBACzD,WAAW,IAAI,GAAG,GAAE,IAAI,CAAC,UAAU,GAAG,KAAK,GAAG,IAAI,CAAC,WAAW,GAAE,KAAK,CAAC;oBACtE,WAAW,IAAI,0BAA0B,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;oBAChE,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBAC1B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;iBACxC;aACF;;;;QAED,qDAAmB;;;YAAnB;gBACE,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC;gBAC1C,IAAI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,qBAAqB,EAAC;oBAChD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC;iBACrD;gBACD,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,KAAK,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;gBACnF,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC;gBACnC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC;aACrC;;;;QAED,6CAAW;;;YAAX;;oBACM,IAAI,GAAG,IAAI;gBAEf,IAAI,IAAI,CAAC,SAAS,EAAE;oBAClB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC;iBAC1E;qBAAM;oBACL,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;iBAC7B;gBAED,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;oBACnB,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;oBACnB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;iBAClB;gBAED,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;;gBAGzD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC9B,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE,CAAC;oBACvC,IAAI,IAAI,CAAC,OAAO,IAAI,GAAG,EAAE;wBACvB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;wBACnD,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC,CAAC;qBACjC;yBAAM,IAAI,IAAI,CAAC,OAAO,IAAI,GAAG,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE;wBAC3F,IAAI,CAAC,mBAAmB,GAAG,CAAC,GAAG,CAAC,CAAC;wBACjC,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC;qBACjF;iBACF,CAAC,CAAC;aACJ;;;;QAED,gDAAc;;;YAAd;gBACE,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC;gBACjE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC;aACvC;;;;QAED,qDAAmB;;;YAAnB;;oBACM,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,OAAO;gBAE7D,IAAI,IAAI,CAAC,SAAS,EAAE;;wBACd,MAAI,GAAG,IAAI;;wBACX,qBAAmB,GAAG,WAAW,CAAC;wBACpC,MAAI,CAAC,YAAY,EAAE,CAAC;wBACpB,IAAI,MAAI,CAAC,YAAY,IAAI,MAAI,CAAC,OAAO,EAAE;4BACrC,aAAa,CAAC,qBAAmB,CAAC,CAAC;yBACpC;qBACF,EAAE,gBAAgB,CAAC;iBACrB;qBAAM;oBACL,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC;iBAClC;aACF;;;;QAED,+CAAa;;;YAAb;;oBACM,IAAI,GAAG,IAAI;gBACf,IAAI,IAAI,CAAC,SAAS,EAAE;;wBAEd,mBAAmB,GAAG,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,mBAAmB;;wBAExE,GAAC,GAAG,CAAC;;wBACL,kBAAgB,GAAG,WAAW,CAAC;wBACjC,GAAC,EAAE,CAAC;wBACJ,IAAI,GAAC,IAAI,IAAI,CAAC,mBAAmB,EAAE;4BACjC,aAAa,CAAC,kBAAgB,CAAC,CAAC;4BAChC,OAAO;yBACR;wBACD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,GAAC,CAAC,CAAC,WAAW,CAAC;qBAC1D,EAAE,mBAAmB,CAAC;iBACxB;qBAAM;oBACL,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC;iBACrF;aACF;;;;;QAED,2CAAS;;;;YAAT,UAAU,SAAS;gBACjB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC;gBACtC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;gBAC7D,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,EAAC;oBAC9B,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;oBAC5B,IAAI,CAAC,UAAU,GAAG,SAAS,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;iBACpD;gBACD,IAAI,CAAC,mBAAmB,EAAE,CAAC;gBAC3B,IAAI,CAAC,cAAc,EAAE,CAAC;aACvB;;;;;QAED,0CAAQ;;;;YAAR,UAAS,KAAK;gBACZ,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;aACzC;;oBAtMFC,cAAS,SAAC;wBACT,QAAQ,EAAE,iBAAiB;wBAC3B,6xEAA6C;iCACpC,uMAWR;qBACF;;;;;wBAjBkBC,eAAU;;;;+BAmB1BC,UAAK;gCACLA,UAAK;iCACLA,UAAK;gCACLA,UAAK;4BACLA,UAAK;2BACLA,UAAK;qCACLA,UAAK;8BACLA,UAAK;kCACLA,UAAK;kCACLA,UAAK;uCACLA,UAAK;oCACLA,UAAK;kCACLA,UAAK;kCASLA,UAAK;4CACLA,UAAK;4BACLA,UAAK;yCACLA,UAAK;8BAELC,WAAM;;QA4JT,8BAAC;KAvMD;;;;;;ACFA;QAIA;SAOqC;;oBAPpCC,aAAQ,SAAC;wBACR,OAAO,EAAE;4BACPC,mBAAY;yBACb;wBACD,YAAY,EAAE,CAAC,uBAAuB,CAAC;wBACvC,OAAO,EAAE,CAAC,uBAAuB,CAAC;qBACnC;;QACmC,2BAAC;KAPrC;;;;;;;;;;;;;;;;;;;;;;;"}
