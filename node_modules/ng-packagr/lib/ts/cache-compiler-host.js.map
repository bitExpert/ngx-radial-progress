{"version":3,"file":"cache-compiler-host.js","sourceRoot":"","sources":["../../../src/lib/ts/cache-compiler-host.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport * as ng from '@angular/compiler-cli';\nimport * as path from 'path';\nimport { ensureUnixPath } from '../util/path';\nimport { StylesheetProcessor } from '../ng-v5/entry-point/resources/stylesheet-processor';\nimport { EntryPointNode, fileUrl } from '../ng-v5/nodes';\nimport { Node } from '../brocc/node';\nimport { BuildGraph } from '../brocc/build-graph';\n\nexport function cacheCompilerHost(\n  graph: BuildGraph,\n  entryPoint: EntryPointNode,\n  compilerOptions: ng.CompilerOptions,\n  moduleResolutionCache: ts.ModuleResolutionCache,\n  stylesheetProcessor?: StylesheetProcessor\n): ng.CompilerHost {\n  const { sourcesFileCache } = entryPoint.cache;\n  const compilerHost = ng.createCompilerHost({ options: compilerOptions });\n  const addDependee = (fileName: string) => {\n    const nodeUri = fileUrl(ensureUnixPath(fileName));\n    let node = graph.get(nodeUri);\n\n    if (!node) {\n      node = new Node(nodeUri);\n      graph.put(node);\n    }\n\n    entryPoint.dependsOn(node);\n  };\n\n  return {\n    ...compilerHost,\n\n    // ts specific\n    fileExists: (fileName: string) => {\n      const cache = sourcesFileCache.getOrCreate(fileName);\n      if (cache.exists === undefined) {\n        cache.exists = compilerHost.fileExists.call(this, fileName);\n      }\n      return cache.exists;\n    },\n\n    getSourceFile: (fileName: string, languageVersion: ts.ScriptTarget) => {\n      addDependee(fileName);\n\n      const cache = sourcesFileCache.getOrCreate(fileName);\n      if (!cache.sourceFile) {\n        cache.sourceFile = compilerHost.getSourceFile.call(this, fileName, languageVersion);\n      }\n      return cache.sourceFile;\n    },\n\n    writeFile: (\n      fileName: string,\n      data: string,\n      writeByteOrderMark: boolean,\n      onError?: (message: string) => void,\n      sourceFiles?: ReadonlyArray<ts.SourceFile>\n    ) => {\n      if (fileName.endsWith('.d.ts')) {\n        sourceFiles.forEach(source => {\n          const cache = sourcesFileCache.getOrCreate(source.fileName);\n          if (!cache.declarationFileName) {\n            cache.declarationFileName = ensureUnixPath(fileName);\n          }\n        });\n      }\n\n      compilerHost.writeFile.call(this, fileName, data, writeByteOrderMark, onError, sourceFiles);\n    },\n\n    readFile: (fileName: string) => {\n      addDependee(fileName);\n\n      const cache = sourcesFileCache.getOrCreate(fileName);\n      if (cache.content === undefined) {\n        cache.content = compilerHost.readFile.call(this, fileName);\n      }\n      return cache.content;\n    },\n\n    // ng specific\n    moduleNameToFileName: (moduleName: string, containingFile: string) => {\n      const { resolvedModule } = ts.resolveModuleName(\n        moduleName,\n        ensureUnixPath(containingFile),\n        compilerOptions,\n        compilerHost,\n        moduleResolutionCache\n      );\n\n      return resolvedModule && resolvedModule.resolvedFileName;\n    },\n\n    resourceNameToFileName: (resourceName: string, containingFilePath: string) => {\n      return path.resolve(path.dirname(containingFilePath), resourceName);\n    },\n\n    readResource: (fileName: string) => {\n      addDependee(fileName);\n\n      const cache = sourcesFileCache.getOrCreate(fileName);\n      if (cache.content === undefined) {\n        // todo: transform styles here.\n        // the empty string is needed because of include paths file's won't be resolved properly.\n        cache.content = compilerHost.readFile.call(this, fileName);\n        if (!/(html|htm)$/.test(path.extname(fileName))) {\n          cache.content = stylesheetProcessor.process(fileName, cache.content);\n        }\n        cache.exists = true;\n      }\n\n      return cache.content;\n    }\n  };\n}\n"]}