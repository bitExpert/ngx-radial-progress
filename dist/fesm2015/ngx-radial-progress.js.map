{"version":3,"file":"ngx-radial-progress.js.map","sources":["ng://ngx-radial-progress/src/app/modules/radial-progress/radial-progress.component.ts","ng://ngx-radial-progress/src/app/modules/radial-progress/radial-progress.module.ts"],"sourcesContent":["import {Component, ElementRef, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'radial-progress',\n  templateUrl: 'radial-progress.component.html',\n  styles: [`\n    :host {\n      display: block;\n    }\n    .radial-progress {\n      position: relative;\n      display: inline-block;\n    }\n    .radial-progress--circle {\n      line-height: 0;\n    }\n  `]\n})\nexport class RadialProgressComponent implements OnInit {\n  @Input() addClass: string = '';\n  @Input() animation: boolean = true;\n  @Input() circleSize: number = 0;\n  @Input() clockwise: boolean = false;\n  @Input() delay: number = 0;\n  @Input() fill: string = 'transparent';\n  @Input() fillBackground: string = 'transparent';\n  @Input() percent: number = 50;\n  @Input() percentUnit: string = '%';\n  @Input() showPercent: boolean = true;\n  @Input() strokeBackground: string = 'transparent';\n  @Input() strokeLinecap: string = \"butt\";\n  @Input() strokeSteps: any = [\n    {\n      strokeColor: 'red',\n      strokeStep: 10\n    }, {\n      strokeColor: 'green',\n      strokeStep: 100\n    }\n  ];\n  @Input() strokeWidth: number = 10;\n  @Input() strokeWidthBackground: number = this.strokeWidth;\n  @Input() title: string = '';\n  @Input() transitionDuration: number = 5000;\n\n  @Output() onClose: EventEmitter<boolean> = new EventEmitter();\n\n  initCircleSize = this.circleSize;\n  strokeDashOffset: number = 0;\n  strokeDashArray: number = 0;\n  percentCount: number = 0;\n  strokeColorActive: string = this.strokeSteps[0].strokeColor;\n  circleProgressSteps: number = 1;\n  radius: number;\n  rotateY: number = 0;\n  animationHelper: boolean = false;\n  strokeWidthHelper: number = this.strokeWidth;\n  // negate is -1 if clockwise is true, see html\n  negate: number = 1;\n  transParam: any = {\n    transPoints: '',\n    transRank: ''\n  };\n\n  constructor(private el:ElementRef) {\n  }\n\n  ngOnInit(): void {\n    let self = this;\n\n    this.normalizeData();\n    this.setCircleDimensions();\n    this.initCircles();\n\n    setTimeout(function () {\n      self.calcDashOffset();\n      self.startPercentCounter();\n      self.gradientColor();\n    }, self.delay);\n  }\n\n  normalizeData(): void {\n    this.percent = Math.round(this.percent);\n\n    if (this.percent > 100) {\n      this.percent = 100;\n    }\n\n    if (this.percent < 0) {\n      this.percent = 0;\n    }\n\n    if (this.circleSize == 0){\n      this.circleSize = this.el.nativeElement.clientWidth;\n    }\n    this.initCircleSize = this.circleSize;\n\n    if (this.circleSize < this.strokeWidth){\n      let infoMessage: string = '';\n      infoMessage += 'circleSize is smaller than strokeWidth ';\n      infoMessage += '('+ this.circleSize + ' < ' + this.strokeWidth +')\\n';\n      infoMessage += 'reducing strokeWidth to ' + this.circleSize / 2;\n      console.warn(infoMessage);\n      this.strokeWidth = this.circleSize / 2;\n    }\n  }\n\n  setCircleDimensions(): void {\n    this.strokeWidthHelper = this.strokeWidth;\n    if (this.strokeWidth < this.strokeWidthBackground){\n      this.strokeWidthHelper = this.strokeWidthBackground;\n    }\n    this.radius = ((this.circleSize / 2) - (this.strokeWidthHelper / 2)) * Math.PI * 2;\n    this.strokeDashArray = this.radius;\n    this.strokeDashOffset = this.radius;\n  }\n\n  initCircles(): void {\n    let self = this;\n\n    if (this.animation) {\n      this.transitionDuration = this.transitionDuration * (this.percent / 100);\n    } else {\n      this.transitionDuration = 0;\n    }\n\n    if (!this.clockwise) {\n      this.rotateY = 180;\n      this.negate = -1;\n    }\n\n    this.strokeColorActive = this.strokeSteps[0].strokeColor;\n\n    // check how far circle progress gets\n    console.log(this.strokeSteps);\n    this.strokeSteps.forEach(function (ele, i) {\n      if (self.percent == 100) {\n        self.circleProgressSteps = self.strokeSteps.length;\n        self.transParam.transPoints = 0;\n      } else if (self.percent >= ele.strokeStep && self.percent >= self.strokeSteps[0].strokeStep) {\n        self.circleProgressSteps = i + 2;\n        self.transParam.transPoints = self.strokeSteps[i + 1].strokeStep - self.percent;\n      }\n    });\n  }\n\n  calcDashOffset(): void {\n    this.strokeDashOffset = this.radius * (1 - (this.percent / 100));\n    this.animationHelper = this.animation;\n  }\n\n  startPercentCounter(): void {\n    let intervalDuration = this.transitionDuration / this.percent;\n\n    if (this.animation) {\n      let self = this;\n      let thisCounterInterval = setInterval(function () {\n        self.percentCount++;\n        if (self.percentCount == self.percent) {\n          clearInterval(thisCounterInterval);\n        }\n      }, intervalDuration);\n    } else {\n      this.percentCount = this.percent;\n    }\n  }\n\n  gradientColor(): void {\n    let self = this;\n    if (this.animation) {\n\n      let gradientChangeTimer = this.transitionDuration / this.circleProgressSteps;\n\n      let i = 0;\n      let gradientInterval = setInterval(function () {\n        i++;\n        if (i >= self.circleProgressSteps) {\n          clearInterval(gradientInterval);\n          return;\n        }\n        self.strokeColorActive = self.strokeSteps[i].strokeColor;\n      }, gradientChangeTimer);\n    } else {\n      this.strokeColorActive = this.strokeSteps[this.circleProgressSteps - 1].strokeColor;\n    }\n  }\n\n  checkSize(thisWidth): void {\n    this.circleSize = this.initCircleSize;\n    console.log(this.initCircleSize, this.circleSize, thisWidth);\n    if (thisWidth < this.circleSize){\n      this.transitionDuration = 0;\n      this.circleSize = thisWidth - this.strokeWidth - 1;\n    }\n    this.setCircleDimensions();\n    this.calcDashOffset();\n  }\n\n  onResize(event): void {\n    this.checkSize(event.target.innerWidth);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RadialProgressComponent } from './radial-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [RadialProgressComponent],\n  exports: [RadialProgressComponent]\n})\nexport class RadialProgressModule { }\n"],"names":[],"mappings":"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"}
