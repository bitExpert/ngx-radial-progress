!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/common"),require("@angular/core")):"function"==typeof define&&define.amd?define("ngx-radial-progress",["exports","@angular/common","@angular/core"],e):e(t["ngx-radial-progress"]={},t.ng.common,t.ng.core)}(this,function(t,e,r){"use strict";var i=function(){function t(t){this.el=t,this.addClass="",this.animation=!0,this.circleSize=0,this.clockwise=!1,this.delay=0,this.fill="transparent",this.fillBackground="transparent",this.percent=50,this.percentUnit="%",this.showPercent=!0,this.strokeBackground="transparent",this.strokeLinecap="butt",this.strokeSteps=[{strokeColor:"red",strokeStep:10},{strokeColor:"green",strokeStep:100}],this.strokeWidth=10,this.strokeWidthBackground=this.strokeWidth,this.title="",this.transitionDuration=5e3,this.onClose=new r.EventEmitter,this.initCircleSize=this.circleSize,this.strokeDashOffset=0,this.strokeDashArray=0,this.percentCount=0,this.strokeColorActive=this.strokeSteps[0].strokeColor,this.circleProgressSteps=1,this.rotateY=0,this.animationHelper=!1,this.strokeWidthHelper=this.strokeWidth,this.negate=1,this.transParam={transPoints:"",transRank:""}}return t.prototype.ngOnInit=function(){var t=this;this.normalizeData(),this.setCircleDimensions(),this.initCircles(),setTimeout(function(){t.calcDashOffset(),t.startPercentCounter(),t.gradientColor()},t.delay)},t.prototype.normalizeData=function(){if(this.percent=Math.round(this.percent),100<this.percent&&(this.percent=100),this.percent<0&&(this.percent=0),0==this.circleSize&&(this.circleSize=this.el.nativeElement.clientWidth),this.initCircleSize=this.circleSize,this.circleSize<this.strokeWidth){var t="";t+="circleSize is smaller than strokeWidth ",t+="("+this.circleSize+" < "+this.strokeWidth+")\n",t+="reducing strokeWidth to "+this.circleSize/2,console.warn(t),this.strokeWidth=this.circleSize/2}},t.prototype.setCircleDimensions=function(){this.strokeWidthHelper=this.strokeWidth,this.strokeWidth<this.strokeWidthBackground&&(this.strokeWidthHelper=this.strokeWidthBackground),this.radius=(this.circleSize/2-this.strokeWidthHelper/2)*Math.PI*2,this.strokeDashArray=this.radius,this.strokeDashOffset=this.radius},t.prototype.initCircles=function(){var r=this;this.animation?this.transitionDuration=this.transitionDuration*(this.percent/100):this.transitionDuration=0,this.clockwise||(this.rotateY=180,this.negate=-1),this.strokeColorActive=this.strokeSteps[0].strokeColor,console.log(this.strokeSteps),this.strokeSteps.forEach(function(t,e){100==r.percent?(r.circleProgressSteps=r.strokeSteps.length,r.transParam.transPoints=0):r.percent>=t.strokeStep&&r.percent>=r.strokeSteps[0].strokeStep&&(r.circleProgressSteps=e+2,r.transParam.transPoints=r.strokeSteps[e+1].strokeStep-r.percent)})},t.prototype.calcDashOffset=function(){this.strokeDashOffset=this.radius*(1-this.percent/100),this.animationHelper=this.animation},t.prototype.startPercentCounter=function(){var t=this.transitionDuration/this.percent;if(this.animation)var e=this,r=setInterval(function(){e.percentCount++,e.percentCount==e.percent&&clearInterval(r)},t);else this.percentCount=this.percent},t.prototype.gradientColor=function(){var t=this;if(this.animation)var e=this.transitionDuration/this.circleProgressSteps,r=0,i=setInterval(function(){++r>=t.circleProgressSteps?clearInterval(i):t.strokeColorActive=t.strokeSteps[r].strokeColor},e);else this.strokeColorActive=this.strokeSteps[this.circleProgressSteps-1].strokeColor},t.prototype.checkSize=function(t){this.circleSize=this.initCircleSize,console.log(this.initCircleSize,this.circleSize,t),t<this.circleSize&&(this.transitionDuration=0,this.circleSize=t-this.strokeWidth-1),this.setCircleDimensions(),this.calcDashOffset()},t.prototype.onResize=function(t){this.checkSize(t.target.innerWidth)},t.decorators=[{type:r.Component,args:[{selector:"radial-progress",template:'<div class="radial-progress"\n     [ngClass]="addClass">\n  <div class="radial-progress--text">\n    <div *ngIf="title!==\'\'" class="radial-progress--title">\n      {{title}}\n    </div>\n    <div *ngIf="showPercent" class="radial-progress--percent-count">\n      {{percentCount}}<span *ngIf="percentUnit!==\'\'" class="radial-progress--percent-count-unit">{{percentUnit}}</span>\n    </div>\n  </div>\n  <div class="radial-progress--circle" (window:resize)="onResize($event)">\n    <svg class="radial-progress--svg"\n         preserveAspectRatio="xMinYMin meet"\n         [attr.width]="circleSize"\n         [attr.height]="circleSize"\n         viewPort="0 0 100 100"\n         version="1.1"\n         xmlns="http://www.w3.org/2000/svg">\n      <circle\n        class="radial-progress--svg-circle"\n        [attr.cx]="(circleSize / 2) * -1"\n        [attr.cy]="circleSize / 2"\n        [attr.r]="(circleSize / 2) - (strokeWidthHelper / 2)"\n        [attr.fill]="fillBackground"\n        stroke-dasharray="0"\n        stroke-dashoffset="0"\n        [attr.stroke-width]="strokeWidthBackground"\n        [ngStyle]="{\n            \'stroke-dasharray\': strokeDashArray + \'px\',\n            \'stroke\': strokeBackground,\n            \'transform\': \'rotate(-90deg)\',\n            \'line-height\': \'0\'\n            }"\n      ></circle>\n      <circle\n        class="radial-progress--svg-circle radial-progress--bar"\n        [attr.cx]="(circleSize / 2) * -1"\n        [attr.cy]="(circleSize / 2) * negate"\n        [attr.r]="(circleSize / 2) - (strokeWidthHelper / 2)"\n        [attr.fill]="fill"\n        stroke-dasharray="0"\n        stroke-dashoffset="0"\n        [attr.stroke-linecap]="strokeLinecap"\n        [attr.stroke-width]="strokeWidth"\n        [style.transition] = "animationHelper ? \'all \' + transitionDuration + \'ms linear, stroke \' + transitionDuration / circleProgressSteps +\'ms linear\' : \'\'"\n        [ngStyle]="{\n            \'stroke\': strokeColorActive,\n            \'stroke-dashoffset\': strokeDashOffset + \'px\',\n            \'stroke-dasharray\': strokeDashArray + \'px\',\n            \'transform\': \'rotateY(\' + rotateY + \'deg) rotateZ(-90deg)\',\n            \'line-height\': \'0\'\n            }"\n      ></circle>\n    </svg>\n  </div>\n</div>\n',styles:["\n    :host {\n      display: block;\n    }\n    .radial-progress {\n      position: relative;\n      display: inline-block;\n    }\n    .radial-progress--circle {\n      line-height: 0;\n    }\n  "]}]}],t.ctorParameters=function(){return[{type:r.ElementRef}]},t.propDecorators={addClass:[{type:r.Input}],animation:[{type:r.Input}],circleSize:[{type:r.Input}],clockwise:[{type:r.Input}],delay:[{type:r.Input}],fill:[{type:r.Input}],fillBackground:[{type:r.Input}],percent:[{type:r.Input}],percentUnit:[{type:r.Input}],showPercent:[{type:r.Input}],strokeBackground:[{type:r.Input}],strokeLinecap:[{type:r.Input}],strokeSteps:[{type:r.Input}],strokeWidth:[{type:r.Input}],strokeWidthBackground:[{type:r.Input}],title:[{type:r.Input}],transitionDuration:[{type:r.Input}],onClose:[{type:r.Output}]},t}(),s=function(){function t(){}return t.decorators=[{type:r.NgModule,args:[{imports:[e.CommonModule],declarations:[i],exports:[i]}]}],t}();t.RadialProgressModule=s,t.Éµa=i,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-radial-progress.umd.min.js.map